import { ArgumentSequence, Command, memberReader } from 'picbot-engine';
import partnerState from '../../states/partner.js';

export default new Command({
    name: 'marry',

    description: '–ñ–µ–Ω–∏—Ç –≤–∞—Å –Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–µ —Å–µ—Ä–≤–µ—Ä–∞ `target`',
    group: '–û—Ç–Ω–æ—à–µ–Ω–∏—è',

    tutorial: '`!marry @Test` –ø–æ–∂–µ–Ω–∏—Ç –≤–∞—Å –Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–µ —Å–µ—Ä–≤–µ—Ä–∞ @Test',

    arguments: new ArgumentSequence(
        {
            description: '–í–æ–∑–ª—é–±–ª–µ–Ω–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ —Å–µ—Ä–≤–µ—Ä–∞',
            reader: memberReader,
        }
    ),

    execute: async ({ executor, message, bot: { database }, args: [target] }) => {
        if (executor.user.bot || target.user.bot) {
            throw new Error('ü§ñ?');
        }

        const executorPartnerAccess = database.accessState(executor, partnerState);
        const targetPartnerAccess = database.accessState(target, partnerState);

        if (await executorPartnerAccess.member()) {
            throw new Error('–¢—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—à—å –≤ –±—Ä–∞–∫–µ. –°—Ç–æ–ø...');
        }

        if (await targetPartnerAccess.member()) {
            throw new Error(`**${target.displayName}** —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –±—Ä–∞–∫–µ. –ü–æ–Ω–∏–º–∞—é, –æ–±–∏–¥–Ω–æ.`);
        }

        await message.channel.send(`**${target.displayName}**, –Ω–∞–ø–∏—à–∏ **–¥–∞**, —á—Ç–æ–±—ã –ø–æ–∂–µ–Ω–∏—Ç—å—Å—è —Å **${executor.displayName}**`);

        /**
         * @param {import('picbot-engine').GuildMessage} msg
         */
        const answerFilter = msg => {
            if (msg.member.id != target.id) {
                return false;
            }

            const lower = msg.cleanContent.toLowerCase();
            return lower.endsWith('–¥–∞') || lower.endsWith('–Ω–µ—Ç');
        };

        const result = await message.channel.awaitMessages(answerFilter, { time: 120000, max: 1 });
        const hadAnswer = result.size == 1;

        if (!hadAnswer) {
            await message.reply('–æ—Ç–≤–µ—Ç–∞ –Ω–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞–ª–æ üíî');
            return;
        }

        const success = result.first()?.content.toLowerCase().startsWith('–¥–∞');

        if (!success) {
            await message.reply('–æ—É... –ü–æ—Ö–æ–∂–µ —Ç–≤–æ—ë —Å–µ—Ä–¥—Ü–µ —Ç–æ–ª—å–∫–æ —á—Ç–æ —Ä–∞–∑–±–∏–ª–∏. –ù–∞ —Ç–∞–∫–∏–µ —Å–ª—É—á–∞–∏ —É –º–µ–Ω—è –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥–∞ `f` üíî');
            return;
        }

        await Promise.all([
            executorPartnerAccess.set(target.id),
            targetPartnerAccess.set(executor.id),
        ]);

        await message.reply('—É—Ä–∞! –í—Å—ë –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ! üíò');
    },
});
